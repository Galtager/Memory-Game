{"version":3,"sources":["Card.js","Navbar.js","MemoryGame.js","index.js"],"names":["Card","props","style","showing","backgroundColor","onClick","className","Navbar","onNewGame","CardState","MemoryGame","cards","id","cardState","shuffle","state","noClick","handleClick","bind","handleNewGame","mapCardState","idsToChange","newCardState","map","c","includes","foundCard","this","find","showingCards","filter","ids","length","hidingCards","setState","setTimeout","card","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e7341476.chunk.js","sourcesContent":["import React  from \"react\";\nimport  PropTypes from \"prop-types\";\nimport './Card.css'\n\nconst Card = (props)=>{\n    let style={};\n    if(props.showing){\n        style.backgroundColor=props.backgroundColor;\n    }\n    return(\n        <div \n        onClick={props.onClick} \n        className=\"card-container\" \n        style={style}\n        />\n    );\n};\nCard.propTypes={\n    showing: PropTypes.bool.isRequired,\n    backgroundColor: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired\n\n};\nexport default Card;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Navbar.css';\n\nconst Navbar = ({onNewGame})=>(\n    <header>\n        <h2>\n            <a>Memory Game</a>\n        </h2>\n        <nav>\n            <li>\n                <a onClick={onNewGame}>New Game</a>\n            </li>\n        </nav>\n    </header>\n);\nNavbar.propTypes={\n    onNewGame: PropTypes.func.isRequired\n}\n\nexport default Navbar;","import React ,{ Component } from 'react';\nimport Card from './Card';\nimport Navbar from './Navbar'\nimport shuffle from \"shuffle-array\";\n\n\nconst CardState = {\n    HIDING :0,\n    SHOWING :1,\n    MATCHING :2\n}\n\nexport default class MemoryGame extends Component{\n    constructor(props){\n        super(props)\n\n        let cards = [\n            {id: 0, cardState: CardState.HIDING, backgroundColor : 'red'},\n            {id: 2, cardState: CardState.HIDING, backgroundColor : 'navy'},\n            {id: 3, cardState: CardState.HIDING, backgroundColor : 'navy'},\n            {id: 4, cardState: CardState.HIDING, backgroundColor : 'green'},\n            {id: 1, cardState: CardState.HIDING, backgroundColor : 'red'},\n            {id: 5, cardState: CardState.HIDING, backgroundColor : 'green'},\n            {id: 6, cardState: CardState.HIDING, backgroundColor : 'yellow'},\n            {id: 7, cardState: CardState.HIDING, backgroundColor : 'yellow'},\n            {id: 8, cardState: CardState.HIDING, backgroundColor : 'black'},\n            {id: 9, cardState: CardState.HIDING, backgroundColor : 'black'},\n            {id: 10, cardState: CardState.HIDING, backgroundColor : 'purple'},\n            {id: 11, cardState: CardState.HIDING, backgroundColor : 'purple'},\n            {id: 12, cardState: CardState.HIDING, backgroundColor : 'pink'},\n            {id: 13, cardState: CardState.HIDING, backgroundColor : 'pink'},\n            {id: 14, cardState: CardState.HIDING, backgroundColor : 'lightskyblue'},\n            {id: 15, cardState: CardState.HIDING, backgroundColor : 'lightskyblue'},\n            {id: 16, cardState: CardState.HIDING, backgroundColor : 'brown'},\n            {id: 17, cardState: CardState.HIDING, backgroundColor : 'brown'},\n            {id: 18, cardState: CardState.HIDING, backgroundColor : 'orange'},\n            {id: 19, cardState: CardState.HIDING, backgroundColor : 'orange'},\n            {id: 20, cardState: CardState.HIDING, backgroundColor : '#85E7FF'},\n            {id: 21, cardState: CardState.HIDING, backgroundColor : '#85E7FF'},\n            {id: 22, cardState: CardState.HIDING, backgroundColor : '#DAC0D1'},\n            {id: 23, cardState: CardState.HIDING, backgroundColor : '#DAC0D1'},\n\n        ];\n        cards = shuffle(cards);\n        this.state={cards,noClick: false};\n\n        this.handleClick=this.handleClick.bind(this);\n        this.handleNewGame=this.handleNewGame.bind(this);\n    \n    }\n\n    handleClick(id){\n        const mapCardState = (cards,idsToChange,newCardState)=>{\n            return cards.map(c=>{\n                if(idsToChange.includes(c.id)){\n                    return{\n                        ...c,\n                        cardState : newCardState\n                    };\n                }\n                return c;\n            });\n        }\n        const foundCard = this.state.cards.find(c=>c.id === id);\n        if(this.state.noClick || foundCard.cardState !== CardState.HIDING){\n        return;\n    }\n    let noClick = false;\n\n    let cards = mapCardState(this.state.cards,[id],CardState.SHOWING);\n\n    const showingCards = cards.filter((c)=>c.cardState===CardState.SHOWING);\n\n    const ids = showingCards.map(c=>c.id);\n    if(showingCards.length ===2 &&\n        showingCards[0].backgroundColor===showingCards[1].backgroundColor){\n            cards = mapCardState(cards,ids,CardState.MATCHING);\n        } else if (showingCards.length ===2)\n        {\n            let hidingCards = mapCardState(cards,ids,CardState.HIDING);\n\n            noClick = true;\n\n            this.setState({cards,noClick}, ()=>{\n                setTimeout(()=>{\n                    this.setState({cards:hidingCards,noClick:false});\n\n                },500);\n            });\n            return;\n        }\n        this.setState({cards,noClick});\n\n    }\n    handleNewGame(){\n        let cards = this.state.cards.map(c=>({\n            ...c,\n            cardState: CardState.HIDING\n        }));\n        cards=shuffle(cards);\n        this.setState({cards});\n    }\n    render(){\n        const cards = this.state.cards.map((card)=>(\n            <Card \n                key={card.id} \n                showing={card.cardState!==CardState.HIDING} \n                backgroundColor={card.backgroundColor}\n                onClick={()=>this.handleClick(card.id)}\n            />\n        ));\n        return(\n            <div>\n                <Navbar onNewGame={this.handleNewGame}/>\n                {cards}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MemoryGame from './MemoryGame'\n\nReactDOM.render(\n  <MemoryGame/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}